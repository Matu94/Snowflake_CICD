name: Redeploy Latest Commit

# This workflow is triggered manually from the GitHub Actions tab
on:
  workflow_dispatch:

jobs:
  redeploy-latest:
    name: Redeploy Files from Latest Commit
    runs-on: ubuntu-latest

    env:
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
      SNOWFLAKE_PRIVATE_KEY_RAW: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_RAW }}
      PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}
      SNOWFLAKE_AUTHENTICATOR: 'SNOWFLAKE_JWT'

    steps:
      # We need the git history to compare commits
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Fetch at least the last 2 commits

      - name: Setup Snow CLI
        uses: snowflakedb/snowflake-cli-action@v1.5

      - name: Find, Sort, and Redeploy SQL Files
        run: |
          echo "Finding files from the latest commit on the main branch..."
          
          # This command compares the latest commit (HEAD) with the one before it (HEAD~1)
          # to find the files that were part of that last commit.
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD -- 'Snowflake/**/*.sql' || true)

          if [ -z "$CHANGED_FILES" ]; then
            echo "No .sql files found in the latest commit."
            exit 0
          fi

          # Sort the files to ensure correct deployment order
          FILES_TO_DEPLOY=$(echo "$CHANGED_FILES" | sort)

          echo "The following files will be redeployed in this order:"
          echo "$FILES_TO_DEPLOY"

          OVERALL_STATUS=0

          while IFS= read -r FILE; do
            if [ -n "$FILE" ]; then
              echo "--------------------------------------------------"
              echo "Executing: $FILE"
              
              if snow sql -f "$FILE" --temporary-connection > output.log 2>&1; then
                STATUS="SUCCESS"
                ERROR_MSG=""
                echo "Successfully executed $FILE"
              else
                STATUS="FAILED"
                ERROR_MSG=$(cat output.log | sed "s/'/''/g")
                echo "Execution of $FILE failed with error: $ERROR_MSG"
                OVERALL_STATUS=1
              fi
              
              # Log this action with a specific TYPE for clear auditing
              LOG_QUERY="INSERT INTO ${{ env.SNOWFLAKE_DATABASE }}.TECH.DEPLOYMENT_HISTORY (FILENAME, COMMIT_SHA, GITHUB_ACTOR, STATUS, ERROR_MESSAGE, TYPE) VALUES ('$FILE', '${{ github.sha }}', '${{ github.actor }}', '$STATUS', '$ERROR_MSG', 'REDEPLOY');"
              snow sql -q "$LOG_QUERY" --temporary-connection
              echo "Logged redeployment for $FILE with status: $STATUS"
              
              echo "--------------------------------------------------"
            fi
          done <<< "$FILES_TO_DEPLOY"

          if [ $OVERALL_STATUS -eq 1 ]; then
            echo "One or more SQL scripts failed. Failing the workflow."
            exit 1
          fi
